-- PS = require("utils.plugin-setter")

-- TODO: add their own config file
-- require("workspaces").setup()
require("sessions").setup({
	-- events = { "WinEnter" },
	session_filepath = vim.fn.stdpath("data") .. "/sessions",
	absolute = true,
})
require("workspaces").setup({
	hooks = {
		-- hooks run before change directory
		open_pre = {
			-- If recording, save current session state and stop recording
			"SessionsStop",

			-- delete all buffers (does not save changes)
			"silent %bdelete!",
		},

		-- hooks run after change directory
		open = {
			-- load any saved session from current directory
			function()
				require("sessions").load(nil, { silent = true })
			end,
		},
	},
})

require("project_nvim").setup({
	detection_methods = { "pattern" },
	patterns = {
        -- exclude projects from ~/.local
		"!.local",
	},
})

require("config.colorscheme")
require("config.nvim-tree")

require("config.comment-nvim")

require("config.nvim-cmp")
require("config.nvim-autopairs") -- put this after nvim-cmp

-- LSP
-- require("config.nvim-lsp-installer")
require("config.mason-nvim")
-- require("config.dap") -- call after mason
require("config.null-ls")

require("config.symbols-outline")
require("config.nvim-treesitter")
require('config.vim-better-whitespace')
-- require('config.toggleterm-nvim')
require("config.indent-blankline")

require("config.telescope")

require("config.lualine-nvim")

require("config.lsp_signature-nvim")

require("config.telekasten")

-- require('config.autosave')

-- Undo: persistent undo (after sessions)
vim.opt.undofile = true
vim.bo.undofile = true
vim.opt.undodir = vim.fn.stdpath("data") .. "/undo//"

-- Swap: copy of unsaved changes
-- @WARNING: temporaly disable, annoying at splitted panes
vim.opt.swapfile = true
vim.opt.directory = vim.fn.stdpath("data") .. "/swap//"

-- Backup: copy of the file before to edit it
vim.opt.backup = true
vim.opt.backupdir = vim.fn.stdpath("data") .. "/backup//"

-- AUTO-COMPILE ON SAVING (LaTex) --
-- vim.cmd [[
-- autocmd BufWritePost *.tex :silent exec '!pdflatex -output-directory="/tmp/" -jobname="temp-autogenerated" <afile>' | silent exec '!mv /tmp/temp-autogenerated.pdf ~/Downloads'
-- ]]
-- END --

-- Properly indentation in Makefile (CMake) --
vim.cmd([[
  autocmd BufEnter Makefile :set sw=4 ts=4 ss=4 noexpandtab
]])

-- Properly indentation in rust --
vim.cmd([[
  autocmd BufEnter *.rs :set sw=4 ts=4 ss=4 noexpandtab
]])

-- Properly indentation in typescript --
vim.cmd([[
  autocmd BufEnter *.ts :set sw=2 ts=2 ss=2 noexpandtab
]])

vim.cmd([[
  autocmd FileType python :set tabstop=4 shiftwidth=4 expandtab autoindent smarttab softtabstop=4
]])

-- Properly indentation in yaml --
vim.cmd([[
  autocmd FileType yaml :set tabstop=2 shiftwidth=2 expandtab autoindent smarttab softtabstop=2
]])

-- https://vi.stackexchange.com/questions/422/displaying-tabs-as-characters
vim.cmd([[
    set list listchars=tab:!~,trail:-,extends:>,precedes:<,eol:¬,space:·
]])
-- END --

-- slow down saving and opening buffers but it enables safer updates to swapfile and undofile (avoid to have empty file after crash)
-- vim.cmd [[
--     set fsync
-- ]]

-- https://github.com/iamcco/markdown-preview.nvim
-- vim.cmd([[
--     function OpenMarkdownPreview (url)
--         execute "silent ! firefox --new-window " . a:url
--     endfunction
--     let g:mkdp_browserfunc = 'OpenMarkdownPreview'
-- ]])
vim.cmd([[
    let g:mkdp_filetypes = [ "markdown" ]
    let g:mkdp_echo_preview_url = 1
]])

require"gitlinker".setup()

-- lewis6991/gitsigns.nvim
require('gitsigns').setup({
  on_attach = function(bufnr)
    local gitsigns = require('gitsigns')

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map('n', ']c', function()
      if vim.wo.diff then
        vim.cmd.normal({']c', bang = true})
      else
        gitsigns.nav_hunk('next')
      end
    end)

    map('n', '[c', function()
      if vim.wo.diff then
        vim.cmd.normal({'[c', bang = true})
      else
        gitsigns.nav_hunk('prev')
      end
    end)

    -- Actions
    map('n', '<leader>hs', gitsigns.stage_hunk)
    map('n', '<leader>hr', gitsigns.reset_hunk)

    map('v', '<leader>hs', function()
      gitsigns.stage_hunk({ vim.fn.line('.'), vim.fn.line('v') })
    end)

    map('v', '<leader>hr', function()
      gitsigns.reset_hunk({ vim.fn.line('.'), vim.fn.line('v') })
    end)

    map('n', '<leader>hS', gitsigns.stage_buffer)
    map('n', '<leader>hR', gitsigns.reset_buffer)
    map('n', '<leader>hp', gitsigns.preview_hunk)
    map('n', '<leader>hi', gitsigns.preview_hunk_inline)

    map('n', '<leader>hb', function()
      gitsigns.blame_line({ full = true })
    end)

    map('n', '<leader>hd', gitsigns.diffthis)

    map('n', '<leader>hD', function()
      gitsigns.diffthis('~')
    end)

    map('n', '<leader>hQ', function() gitsigns.setqflist('all') end)
    map('n', '<leader>hq', gitsigns.setqflist)

    -- Toggles
    map('n', '<leader>tb', gitsigns.toggle_current_line_blame)
    map('n', '<leader>td', gitsigns.toggle_deleted)
    map('n', '<leader>tw', gitsigns.toggle_word_diff)

    -- Text object
    map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
  end
})
