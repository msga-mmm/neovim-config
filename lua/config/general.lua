require("project_nvim").setup({
    detection_methods = { "pattern" },
    patterns = {
        -- exclude projects from ~/.local
        "!.local",
    },
})

-- Undo: persistent undo (after sessions)
vim.opt.undofile = true
vim.bo.undofile = true
vim.opt.undodir = vim.fn.stdpath("data") .. "/undo//"

-- Swap: copy of unsaved changes
-- @WARNING: temporaly disable, annoying at splitted panes
vim.opt.swapfile = true
vim.opt.directory = vim.fn.stdpath("data") .. "/swap//"

-- Backup: copy of the file before to edit it
vim.opt.backup = true
vim.opt.backupdir = vim.fn.stdpath("data") .. "/backup//"

-- AUTO-COMPILE ON SAVING (LaTex) --
-- vim.cmd [[
-- autocmd BufWritePost *.tex :silent exec '!pdflatex -output-directory="/tmp/" -jobname="temp-autogenerated" <afile>' | silent exec '!mv /tmp/temp-autogenerated.pdf ~/Downloads'
-- ]]
-- END --

-- Properly indentation in Makefile (CMake) --
vim.cmd([[
  autocmd BufEnter Makefile :set sw=4 ts=4 ss=4 noexpandtab
]])

-- Properly indentation in rust --
vim.cmd([[
  autocmd BufEnter *.rs :set sw=4 ts=4 ss=4 noexpandtab
]])

-- Properly indentation in typescript --
vim.cmd([[
  autocmd BufEnter *.ts :set sw=2 ts=2 ss=2 noexpandtab
]])

vim.cmd([[
  autocmd FileType python :set tabstop=4 shiftwidth=4 expandtab autoindent smarttab softtabstop=4
]])

-- Properly indentation in yaml --
vim.cmd([[
  autocmd FileType yaml :set tabstop=2 shiftwidth=2 expandtab autoindent smarttab softtabstop=2
]])

-- https://vi.stackexchange.com/questions/422/displaying-tabs-as-characters
vim.cmd([[
    set list listchars=tab:!~,trail:-,extends:>,precedes:<,eol:¬,space:·
]])
-- END --

-- slow down saving and opening buffers but it enables safer updates to swapfile and undofile (avoid to have empty file after crash)
-- vim.cmd [[
--     set fsync
-- ]]

-- https://github.com/iamcco/markdown-preview.nvim
-- vim.cmd([[
--     function OpenMarkdownPreview (url)
--         execute "silent ! firefox --new-window " . a:url
--     endfunction
--     let g:mkdp_browserfunc = 'OpenMarkdownPreview'
-- ]])
vim.cmd([[
    let g:mkdp_filetypes = [ "markdown" ]
    let g:mkdp_echo_preview_url = 1
]])

require("gitlinker").setup()
